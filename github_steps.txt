https://www.youtube.com/watch?v=gwWKnnCMQ5c

https://mastek.udemy.com/course/git-version-control/

create folder, get git here

->git config --global user.name Maansee

->git config --global email maansee@yodaplus.com

To check if it has been set: git config --global user.name, git config --global user.email:
this should display correct details.

->code. 
this opens vscode 

-> git init

-> git status 

If untracked, use 

->git add filename

-> git commit --initial commit

touch command is used with bank files: touch contact.html(an example)

 to add multiple files use command: git add -A

simple way with msg: git commit-m "msg in here"

checkout: to match with the last commit: git checkout filename

git checkout -f: to use for multiple files to match with last commit

-> git log
 author and date 

-> git log -p -5
this command will show the last 5 commits

-> git diff
working tree will be compared with staging area

-> git diff --staged
compare staging area with last commit

ctrl+c==^c ==cancel

->git commit -a -m "skipped staging ..."
direct commit

->ls
list files

->clear
cls

-> git rm
removes from working area and staging directory

->git rm --cached filename
file will be removed only from staging area

-> rm -rf git
deletes the git repository

->git clone repository_name
clones the repository to github

->git show
to review the changes

->git stash pop 
remove changes from stack and place them in current working directory

->git checkout
to revert contents of the file or to obtain deleted file from local repository

->git --mixed
reverts changes fromstaging area only

->git --hard
clear staging area and delete local changes too




Blobs
Blob stands for Binary Large Object. Each version of a file is represented by blob. A blob holds the file data but doesnâ€™t contain any metadata about the file. It is a binary file, and in Git database, it is named as SHA1 hash of that file. In Git, files are not addressed by names. Everything is content-addressed.

Trees
Tree is an object, which represents a directory. It holds blobs as well as other sub-directories. A tree is a binary file that stores references to blobs and trees which are also named as SHA1 hash of the tree object.

Commits
Commit holds the current state of the repository. A commit is also named by SHA1 hash. You can consider a commit object as a node of the linked list. Every commit object has a pointer to the parent commit object. From a given commit, you can traverse back by looking at the parent pointer to view the history of the commit. If a commit has multiple parent commits, then that particular commit has been created by merging two branches.

Branches
Branches are used to create another line of development. By default, Git has a master branch, which is same as trunk in Subversion. Usually, a branch is created to work on a new feature. Once the feature is completed, it is merged back with the master branch and we delete the branch. Every branch is referenced by HEAD, which points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit.

Tags
Tag assigns a meaningful name with a specific version in the repository. Tags are very similar to branches, but the difference is that tags are immutable. It means, tag is a branch, which nobody intends to modify. Once a tag is created for a particular commit, even if you create a new commit, it will not be updated. Usually, developers create tags for product releases.

Clone
Clone operation creates the instance of the repository. Clone operation not only checks out the working copy, but it also mirrors the complete repository. Users can perform many operations with this local repository. The only time networking gets involved is when the repository instances are being synchronized.

Pull
Pull operation copies the changes from a remote repository instance to a local one. The pull operation is used for synchronization between two repository instances. This is same as the update operation in Subversion.

Push
Push operation copies changes from a local repository instance to a remote one. This is used to store the changes permanently into the Git repository. This is same as the commit operation in Subversion.

HEAD
HEAD is a pointer, which always points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit. The heads of the branches are stored in .git/refs/heads/ directory.


push - to send to the server
pull - to bring from server


Stack-overflow:
After the GitHub update 01.10.20 you should use main instead of master.

Do it like these way...

Create a repository on GitHub
Delete existing .git file on your local directory
Go to local project directory and type git init
git add .
git commit -m"My First Commmit"
Now check your branch name it will be master in your local project
git remote add origin <remote repository URL past here from the github repository> then type git remote -v
git push -f origin master
Now check the github repository you will see two branch 1. main 2. master
In your local repository create new branch and the branch name will be main
git checkout main
git merge master
git pull origin main
git push -f origin main


My steps:


git init
git add .
git remote add origin https://github.com/Maansee/StartupWebsite.git
git remote -v
git push -f origin main













